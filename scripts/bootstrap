#!/usr/bin/env zsh

emulate -L zsh
setopt extended_glob null_glob glob_dots no_unset

early_exit()
{
    local -i exitcode=$?
    (( # > 1 )) && exitcode=$1

    print -P "\n%F{red}%BERROR detected%f%b"
    print "$SCRIPT_NAME is now exitting. The bootstrapping"
    print "is probably uncomplete. You should resolve the" 
    print "issues and re-run $SCRIPT_NAME."
    exit exitcode
}

throw_script_err()
{
    local message
    if (( # == 0 )); then
        message="No message given, throw called by ${funcstack[-1]}."
    else
        message=$1
    fi
    print -P "\n%F{red}%BScript Error:%b $message%f"
    early_exit 2
}

print_usage()
{
    print "Usage: $SCRIPT_NAME [ -h | --help ] [ -v | --verbose ] [ -s | --skip-installation ]"
    print -f "       %*s [ -x | --no-xdg ] { filename... | directory... | all }\n" ${#SCRIPT_NAME}
    print "Options:"
    print "    -h    show this help and exit"
    print "    -v    print more messages when bootstrapping"
    print "    -s    skip installation of missing packages"
    print "    -x    skip checking and creating xdg directories and variables"
}


print_welcome()
{
    print -Pn "%F{yellow}"
    print -R ' ___  ___   ___ _____ ___ _____ ___    _   ___'
    print -R '| _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \'
    print -R '| _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/'
    print -R '|___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|'
    print -Pn "%f"
}

process_args()
{
    typeset -gi VERBOSE=0
    typeset -gi SKIP_INSTALLATION=0
    typeset -gi SKIP_STANDARD_DIRS=0
    typeset -gi SKIP_XDG=0
    typeset -gi SKIP_MACOS_DEFAULTS=0
    typeset -ga BOOTSTRAP_FILES

    while (( # > 0 )); do
        case $1 in
            -h|--help)
                print_usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=1
                shift
                ;;
            -s|--skip-installation)
                SKIP_INSTALLATION=1
                shift
                ;;
            -x|--no-xdg)
                SKIP_XDG=1
                shift
                ;;
            -d|--no-standard-dirs)
                SKIP_STANDARD_DIRS=1
                shift
                ;;
            -m|--no-macos-defaults)
                SKIP_MACOS_DEFAULTS=1
                shift
                ;;
            -*|--*)
                print -P "%F{red}%BError:%f%b Unknown option $1\n"
                print_usage
                exit 2
                ;;
            all)
                local -a ignored_persys=( $IGNORED )
                if [[ $(uname -s) == Darwin ]]; then
                    ignored_persys+=( archlinux tofi xdg-open )
                fi
                local bootstrap_files_pat=$DOTFILES_PATH/^(${(j:|:)ignored_persys})
                local -a bootstrap_files_paths=( $~bootstrap_files_pat )
                # The double dollar sign in the second expansion is due to the first expansion
                # needed to turn on word splitting
                BOOTSTRAP_FILES=( $bootstrap_files_paths:t )
                shift
                ;;
            *)
                local frealpath=${1:a}
                local fbasename=${frealpath:t}
                if [[ -e $frealpath && ${frealpath:h} -ef $DOTFILES_PATH ]]; then
                    if [[ ${(*)IGNORED} =~ ${fbasename} ]]; then
                        print -P "%F{yellow}%BWarning:%f%b $1 cannot be bootstrapped, ignoring it..."
                    elif [[ ! ${(*)BOOTSTRAP_FILES} =~ $fbasename ]]; then
                        BOOTSTRAP_FILES+=$fbasename
                    fi
                else
                    print -P "%F{yellow}%BWarning:%f%b $1 doesn't exist or is not located in the dotfiles directory, ignoring it..."
                fi
                shift
                ;;
        esac
    done
    if (( #BOOTSTRAP_FILES == 0 )); then
        print -P "%B%F{red}Error:%b%f You haven't specified any valid files/dirs to bootstrap, if you want to bootstrap everything, use 'all' as an argument.\n"
        print_usage
        exit 2
    fi
}

confirmation()
{
    local -i skip_endline=0
    while [[ $1 == -* ]]; do
        case $1 in
            -n)
                skip_endline=1
                ;;
            -*)
                throw_script_err "Function ${funcstack[1]} doesn't accept option $1."
        esac
        shift
    done

    local prompt=${(%g::)1}
    (( $# == 2 )) && print -P $2
    read -q "result?$prompt [Y/n] "
    (( skip_endline )) || print
    if [[ $result =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

prepare_package_manager()
{
    if (( ! $+commands[sudo] )) && [[ $(uname -s) == Linux ]]; then
            print -P "\n%F{yellow}%BWarning:%f%b Missing 'sudo', cannot install packages and bootstrap archlinux directory."
            return 1
    fi

    if [[ $(uname -s) == Linux ]]; then
        PKG_PREFIX=/usr
        if (( $+commands[pacman] )); then
            PKG_MANAGER=pacman
        elif (( $+commands[apt] )); then
            PKG_MANAGER=apt
        elif (( $+commands[apt-get] )); then
            PKG_MANAGER=apt-get
        else
            print -P "\n%F{yellow}%BWarning:%f%b Unknown package manager, cannot install packages."
            return 1
        fi
    elif [[ $(uname -s) == Darwin ]]; then
        local brewpath=/(usr|opt)/(local|homebrew)/bin/brew(*)
        if [[ -e $~brewpath(#q) ]]; then
            PKG_MANAGER=brew
            eval "$($~brewpath shellenv)"
            PKG_PREFIX=$HOMEBREW_PREFIX
        else
            install_package -C homebrew /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            if [[ -e $~brewpath(#q) ]]; then
                PKG_MANAGER=brew
                eval "$($~brewpath shellenv)"
                PKG_PREFIX=$HOMEBREW_PREFIX
            else
                print -P "\n%F{yellow}%BWarning:%f%b Homebrew not installed, cannot install packages."
                return 1
            fi
        fi
    else
        print -P "\n%F{yellow}%BWarning:%f%b Unknown OS, cannot install packages."
        return 1
    fi

    return 0
}

print_install_header()
{
    while [[ $1 == -* ]]; do
        case $1 in
            -N)
                local newline_first=1
                ;;
            -*)
                throw_script_err "Function ${funcstack[1]} doesn't accept option $1."
                ;;
        esac
        shift
    done

    if (( # != 1 )); then
        throw_script_err "Function ${funcstack[1]} takes 1 positional argument."
    fi

    local package_name=$1
    print -P "${newline_first:+\n}%F{blue}%B--------------------${(U)package_name} INSTALLATION--------------------%f%b"
}

print_install_footer()
{
    local -i no_newline=0
    while [[ $1 == -* ]]; do
        case $1 in
            -n)
                no_newline=1
                ;;
            -*)
                throw_script_err "Function ${funcstack[1]} doesn't accept option $1."
                ;;
        esac
        shift
    done

    if (( # != 1 )); then
        throw_script_err "Function ${funcstack[1]} takes 1 positional argument."
    fi

    local package_name=$1
    local footer="%F{blue}%B-----------------${(U)package_name} INSTALLATION ENDS------------------%f%b"
    (( no_newline )) && print -n ${(%)footer} || print ${(%)footer}
}

install_with_aur()
{
    local -i skip_confirm=0
    local -a extra_args=()
    local -a deps=()
    local destination
    while [[ $1 == -* ]]; do
        case $1 in
            -x)
                (( # < 2 )) && throw_script_err "You need to pass the extra argument when using ${funcstack[1]} $1."
                extra_args+=$2
                shift
                ;;
            -Y)
                skip_confirm=1
                ;;
            -d)
                (( # < 2 )) && throw_script_err "You need to pass the dependency when using ${funcstack[1]} $1."
                deps+=$2
                shift
                ;;
            -t)
                (( # < 2 )) && throw_script_err "You need to pass destinatination when using ${funcstack[1]} $1."
                destination=$2
                shift
                ;;
        esac
        shift
    done

    (( # > 1 )) || throw_script_err "Have to pass at least 2 positional args to ${funcstack[1]}"
    local package_name=$1
    local aur_url=$2
    (( # > 2 )) && aur_url=$3

    (( ! $+commands[git] )) && \
        print -Pn "\n%F{red}%BError:%f%b You cannot install package ${package_name} without git." && \
        return 1

    local -i return_code=0
    if (( skip_confirm )) || \
        confirmation -n "\n%F{yellow}%BWarning:%f%b ${package_name} is %Unot installed%u, would you like to install it?"; then
        print_install_header -N $package_name
        if (( #deps )); then
            if [[ $PKG_MANAGER == brew ]]; then
                brew install --quiet ${(@)deps} || return 1
            elif [[ $PKG_MANAGER == pacman ]]; then
                sudo pacman -S --needed --noconfirm ${(@)deps} || return 1
            else
                print -P "\n%F{red}%BError:%f%b Installing dependencies is supported only with pacman or brew, dependencies will not be installed."
            fi
        fi
        local original_wd=$(pwd)
        git clone ${(@)extra_args} $aur_url ${destination:-$HOME/Software/$package_name} && \
            cd ${destination:-$HOME/Software/$package_name} && \
            makepkg -si --noconfirm && rehash || return_code=1
        cd $original_wd
        print_install_footer -n $package_name
    fi
    return $return_code
}

install_package()
{
    local -a original_args=( $@ )

    local -i use_aur=0
    local -i use_git=0
    local -i use_yay=0
    local -i use_cask=0
    local -i use_custom_args=0
    local -i skip_confirm=0
    local -a custom_args=()
    local -a extra_args=()
    local -a deps=()
    local destination
    while [[ $1 == -* ]]; do
        case $1 in
            -a)
                use_aur=1
                ;;
            -g)
                use_git=1
                ;;
            -t)
                (( # < 2 )) && throw_script_err "You need to pass destinatination when using ${funcstack[1]} $1."
                destination=$2
                shift
                ;;
            -d)
                (( # < 2 )) && throw_script_err "You need to pass the dependency when using ${funcstack[1]} $1."
                deps+=$2
                shift
                ;;
            -y)
                use_yay=1
                ;;
            -c)
                use_cask=1
                ;;
            -x)
                (( # < 2 )) && throw_script_err "You need to pass the extra argument when using ${funcstack[1]} $1."
                extra_args+=$2
                shift
                ;;
            -C)
                use_custom_args=1
                ;;
            -Y)
                skip_confirm=1
                ;;
            -*)
                throw_script_err "Function ${funcstack[1]} doesn't accept option $1."
                ;;
        esac
        shift
    done

    if [[ "$(uname -s)" == Linux ]] && (( ! $+commands[sudo] )); then
        print -Pn "\n%F{red}%BError:%f%b Cannot install packages on Linux without %Usudo%u."
        return 1
    fi

    (( # > 0 )) || throw_script_err "Function ${funcstack[1]} has to be called with positional arguments."
    local package_name=$1


    local -i return_code=0
    local -a install_arguments=()
    if (( use_aur )) && [[ "$(uname -s)" == Linux ]]; then
        install_with_aur $original_args || return_code=1
    else
        if (( use_custom_args )); then
            (( # > 1 )) || throw_script_err "Have to pass at least 2 positional args to ${funcstack[1]} -C"
            install_arguments+=( ${@:2} )
        elif (( use_yay )) && [[ "$(uname -s)" == Linux ]]; then
            (( ! $+commands[yay] )) && \
                print -Pn "\n%F{red}%BError:%f%b You cannot install package ${package_name} without yay." && \
                return 1
            local yay_package=$package_name
            (( # > 1 )) && yay_package=$2
            (( # > 2 )) && yay_package=$3
            install_arguments=( yay -S ${(@)extra_args} --noconfirm --removemake $yay_package )
        elif (( use_git )); then
            (( ! $+commands[git] )) && \
                print -Pn "\n%F{red}%BError:%f%b You cannot install package ${package_name} without git." && \
                return 1
            (( # > 1 )) || throw_script_err "Have to pass at least 2 positional args to ${funcstack[1]} -g"
            local git_url=$2
            install_arguments+=( git clone ${(@)extra_args} $git_url ${destination:-$HOME/Software/$package_name} )
        elif [[ $PKG_MANAGER == brew ]]; then
            local brew_package=$package_name
            (( # > 1 )) && brew_package=$2
            install_arguments+=( brew install ${(@)extra_args} $brew_package )
        elif [[ $PKG_MANAGER == pacman ]]; then
            local pacman_package=$package_name
            (( # > 1 )) && pacman_package=$2
            (( # > 2 )) && pacman_package=$3
            install_arguments+=( sudo pacman -S ${(@)extra_args} --noconfirm $pacman_package )
        else
            local apt_package=$package_name
            (( # > 1 )) && apt_package=$2
            (( # > 2 )) && apt_package=$3
            (( # > 3 )) && apt_package=$4
            install_arguments+=( sudo $PKG_MANAGER install ${(@)extra_args} $apt_package )
        fi

        if (( skip_confirm )) || \
            confirmation -n "\n%F{yellow}%BWarning:%f%b ${package_name} is %Unot installed%u, would you like to install it?"; then
            print_install_header -N $package_name
            if (( #deps )); then
                if [[ $PKG_MANAGER == brew ]]; then
                    brew install --quiet ${(@)deps} || return 1
                elif [[ $PKG_MANAGER == pacman ]]; then
                    sudo pacman -S --needed --noconfirm ${(@)deps} || return 1
                else
                    print -Pn "%F{red}%BError:%f%b Installing dependencies is supported only with pacman or brew, dependencies will not be installed."
                fi
            fi
            ${(@)install_arguments} && rehash || return_code=1
            print_install_footer -n $package_name
        fi
    fi

    return $return_code
}

check_packages()
{
    print -n "\nChecking whether important packages are installed."
    local -i messages=0

    local -i have_git=1
    if (( ! $+commands[git] )); then
        install_package git
        if [[ ! -x $PKG_PREFIX/bin/git ]]; then
            print -Pn "\n%F{yellow}%BWarning:%f%b git not installed, $SCRIPT_NAME cannot install packages from git repositories."
            have_git=0
        fi
        messages+=1
    fi

    if [[ "$(uname -s)" == Linux ]]; then
        if (( ! $+commands[yay] )); then
            install_package -d base-devel -a yay https://aur.archlinux.org/yay.git
            messages+=1
        fi
    fi

    if (( ! $+commands[bash] )) || (( "$(bash -c 'echo ${BASH_VERSINFO:-0}')" < 5 )); then
        install_package "up-to-date bash" "bash"
        messages+=1
    fi

    local -a p10k_paths=(
        ${P10K_PATH:-}
        $PKG_PREFIX/(share|opt)/(zsh-theme-powerlevel10k|powerlevel10k)/powerlevel10k.zsh-theme
    )
    if (( ! #p10k_paths )); then
        if ! install_package -y p10k powerlevel10k zsh-theme-powerlevel10k; then
            install_package -Y -t ~/Software/powerlevel10k -x --depth=1 -g "p10k git clone" https://github.com/romkatv/powerlevel10k.git && \
                print -Pn "\n%F{blue}%BNote:%f%b Adding \$P10K_PATH override to your %U.profile_local%u" && \
                echo "export P10K_PATH=~/Software/powerlevel10k" >> $HOME/.profile_local
        fi
        messages+=1
    fi

    if (( ! $+commands[vim] )); then
        install_package vim
        messages+=1
    fi

    if (( ! $+commands[nvim] )); then
        install_package neovim nvim neovim
        messages+=1
    fi

    if (( ! $+commands[python3] )); then
        install_package python3 python
        messages+=1
    fi

    if (( ! $+commands[virtualenv] )); then
        install_package virtualenv virtualenv python-virtualenv
        messages+=1
    fi

    if [[ ! -r ${VIRTUALENVWRAPPER_PATH:-$PKG_PREFIX/bin/virtualenvwrapper.sh} ]]; then
        install_package virtualenvwrapper virtualenvwrapper python-virtualenvwrapper
        messages+=1
    fi

    if (( ! $+commands[pipx] )); then
        install_package pipx pipx python-pipx
        messages+=1
    fi

    if (( ! $+commands[tmux] )); then
        install_package tmux
        messages+=1
    fi

    if (( ! $+commands[nnn] )); then
        install_package nnn
        messages+=1
    fi

    if (( ! $+commands[poetry] )); then
        install_package poetry poetry python-poetry
        messages+=1
    fi

    if (( ! $+commands[zk] )); then
        install_package zk
        messages+=1
    fi

    if (( ! $+commands[htop] )); then
        install_package htop
        messages+=1
    fi

    local -a synhl_paths=(
        ${SYNHL_PATH:-}
        $PKG_PREFIX/share/(zsh/)#(plugins/)#zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    )
    if (( #synhl_paths == 0 )); then
        install_package -y zsh-syntax-highlighting zsh-syntax-highlighting zsh-syntax-highlighting-git
        messages+=1
    fi

    if [[ "$(uname -s)" == Darwin ]]; then
        if [[ ! -d /Applications/MacVim.app ]]; then
            install_package -x --cask macvim
            messages+=1
        fi

        if  [[ ! -d /Applications/Amethyst.app ]]; then
            install_package -x --cask amethyst
            messages+=1
        fi
    fi

    (( messages )) && print || print -n " "
    print -P "=> %B%F{green}Done%b%f"
}

check_defaults()
{
    local -i messages=0
    print -n "\nChecking whether correct macOS defaults are set."

    if (( "$(defaults read -g ApplePressAndHoldEnabled)" != 0 )); then
        print -Pn "\n    Setting %F{cyan}ApplePressAndHoldEnabled = 0%f"
        defaults write -g ApplePressAndHoldEnabled -bool false
        messages+=1
    fi

    if (( "$(defaults read -g KeyRepeat)" != 1 )); then
        print -Pn "\n    Setting %F{cyan}KeyRepeat = 1%f"
        defaults write -g KeyRepeat -int 1
        messages+=1
    fi

    if (( "$(defaults read -g InitialKeyRepeat)" != 15 )); then
        print -Pn "\n    Setting %F{cyan}InitialKeyRepeat = 15%f"
        defaults write -g InitialKeyRepeat -int 15
        messages+=1
    fi

    (( messages )) && print || print -n " "
    print -P "=> %B%F{green}Done%b%f"
}

check_standard_dirs()
{
    local -i messages=0
    print -n "\nChecking whether standard directories exist."
    for dirname in $HOME/Development $HOME/Software; do
        if [[ ! -d $dirname ]]; then
            print -Pn "\n    Creating %U${(D)dirname}%u"
            mkdir -p $dirname
            messages+=1
        fi
    done
    (( messages )) && print || print -n " "
    print -P "=> %B%F{green}Done%b%f"
}

check_xdg_dirs()
{
    export XDG_CONFIG_HOME=$HOME/.config
    export XDG_DATA_HOME=$HOME/.local/share
    export XDG_STATE_HOME=$HOME/.local/state
    export XDG_CACHE_HOME=$HOME/.cache

    print -n "\nChecking whether XDG Base Dirs exist."
    local -i messages=0
    for xdgvar in XDG_CONFIG_HOME XDG_DATA_HOME XDG_STATE_HOME XDG_CACHE_HOME; do
        if [[ ! -d ${(P)xdgvar} ]]; then
            print -Pn "\n    Creating ${xdgvar} at %U${(D)${(P)xdgvar}}%u"
            mkdir -p ${(P)xdgvar}
            messages+=1
        fi
    done

    (( messages )) && print || print -n " "
    print -P "=> %B%F{green}Done%b%f"
}

parent_minus_anchor()
{
    if (( # != 2 )); then
        throw_script_err "Function ${funcstack[1]} takes 2 arguments."
    fi

    local file=$1
    local anchor=$2
    local parent_folder=${file:h}
    local res_with_slash=${parent_folder#${anchor}}
    print ${res_with_slash#/}
}

safe_symlink()
{
    if (( # != 2 )); then
        throw_script_err "Function ${funcstack[1]} takes 2 arguments."
    fi

    local to=${1:a}
    local from=${2:a}
    if [[ -e $from && ! -L $from ]]; then
        if [[ ${from:A} == $DOTFILES_PATH/* ]]; then
            print -P "%B%F{red}Error:%b%f The file %U${(D)from}%u has realpath %U${(D)from:A}%u."
            print "Hence you are are trying to overwrite a file which is inside the dotfiles"
            print "directory. It seems that you have previously bootstrapped an entire folder."
            print "Please remove the symlink and run $SCRIPT_NAME again."
            return 1
        fi

        local path_from_home=$(parent_minus_anchor $from $HOME)
        local backupdir=${BOOTSTRAP_BACKUPDIR:-$HOME/dotfiles.backup}/$path_from_home
        (( $VERBOSE )) && print -n "\n    " || print
        print -Pn "%B%F{yellow}Warning:%f%b File %U${(D)from}%u already exists. Making a backup at %U${(D)backupdir}%u."
        [[ -d  $backupdir ]] || mkdir -p $backupdir
        mv --backup=numbered $from $backupdir/${from:t}
    fi
    if [[ -L $from && $from -ef $to ]]; then
        (( VERBOSE )) && print -Pn "\n    %F{blue}%BNote:%f%b File %U${to#${DOTFILES_PATH}/}%u already bootstrapped."
    else
        (( VERBOSE )) && print -Pn "\n    Making a symlink %F{cyan}%B${(D)from}%f%b -> %F{cyan}%B${(D)to}%f%b"
        [[ -d ${from:h} ]] || mkdir -p ${from:h}
        ln -fsr $to $from
    fi
}

bootstrap_file()
{
    if (( # != 3 )); then
        throw_script_err "Function ${funcstack[1]} accepts 3 positional arguments."
    fi

    local to_bootstrap=$1
    local target_location=$2
    local anchor=$3

    local inner_path=$(parent_minus_anchor $to_bootstrap $anchor)
    local path_target_symlink=${inner_path}${inner_path:+/}${to_bootstrap:t}
    if [[ $target_location -ef $HOME ]]; then
        [[ ${path_target_symlink:h1} == .* ]] || path_target_symlink=.$path_target_symlink
    fi

    local symlink_path=${target_location}/${path_target_symlink}
    safe_symlink $to_bootstrap $symlink_path
}

bootstrap_generic()
{
    local -i bootstrap_whole_dir=0
    while [[ $1 = -* ]]; do
        case $1 in
            -d)
                bootstrap_whole_dir=1
                ;;
            -*)
                throw_script_err "Function ${funcstack[1]} doesn't accept option $1."
                ;;
        esac
        shift
    done

    if (( # < 2 || # > 3 )); then
        throw_script_err "Function ${funcstack[1]} accepts 2 to 3 positional arguments."
    fi


    local to_bootstrap=$1
    local target_location=$2
    local anchor=${3:-$DOTFILES_PATH}

    if (( bootstrap_whole_dir )) || [[ -f $to_bootstrap ]]; then
        bootstrap_file $to_bootstrap $target_location $anchor
    else
        local leafs=( $to_bootstrap/**/* )
        for leaf in $leafs; do
            [[ -f $leaf ]] && bootstrap_file $leaf $target_location $anchor
        done
    fi
}

bootstrap_zsh()
{
    local zshrc=$DOTFILES_PATH/zsh/.zshrc
    for zsh_fn in $DOTFILES_PATH/zsh/*; do
        case $zsh_fn in
            */(|.)zshrc | */(|.)zprofile | */(|.)zlogin | */(|.)zlogout | */(|.)zshenv)
                bootstrap_generic $zsh_fn $HOME $DOTFILES_PATH/zsh
                ;;
            *)
                local sourced_path=$(grep -m 1 -o "source [^[:space:]]*${zsh_fn:t}" $zshrc | cut -d ' ' -f2 | envsubst)
                safe_symlink $zsh_fn $sourced_path
                ;;
        esac
    done

    if [[ ! ${(*)BOOTSTRAP_FILES} =~ bash ]]; then
        if [[ ! $HOME/.profile -ef $DOTFILES_PATH/bash/.profile ]]; then
            if confirmation "Would you like to bootstrap it?" "%F{yellow}%BWarning:%f%b Zsh dotfiles source .profile and it is not bootstrapped."; then
                bootstrap_generic $DOTFILES_PATH/bash/.profile $HOME $DOTFILES_PATH/bash
            fi
        fi
        if [[ ! $HOME/.bash_aliases -ef $DOTFILES_PATH/bash/.bash_aliases ]]; then
            if confirmation "Would you like to bootstrap it?" "%F{yellow}%BWarning:%f%b Zsh dotfiles source .bash_aliases and it is not bootstrapped."; then
                bootstrap_generic $DOTFILES_PATH/bash/.bash_aliases $HOME $DOTFILES_PATH/bash
            fi
        fi
    fi
}

bootstrap_tmux()
{
    local tmux_conf=$DOTFILES_PATH/tmux/tmux.conf
    local plugin_path=$(grep -m 1 -o "TMUX_PLUGIN_MANAGER_PATH [^[:space:]]*" $tmux_conf | \
        cut -d ' ' -f2 | tr -d \" | envsubst)
    plugin_path=${plugin_path:h:h}
    for tmux_fn in $DOTFILES_PATH/tmux/*; do
        case $tmux_fn in
            */tmux/plugins)
                for plugin in $tmux_fn/*; do
                    bootstrap_generic -d $plugin $plugin_path
                done
                ;;
            */tmux/tmux-256color)
                ;;
            *)
                bootstrap_generic $tmux_fn $XDG_CONFIG_HOME
                ;;
        esac
    done
    if [[ ! -d $plugin_path/tmux/plugins/tpm ]] && (( SKIP_INSTALLATION == 0 )); then
        install_package -g -t $plugin_path/tmux/plugins/tpm tpm https://github.com/tmux-plugins/tpm
        (( VERBOSE )) || print
    fi
}

admin_copy()
{
    local _from=$1
    local _to=$2
    if [[ -n "$VERBOSE" ]]; then
        local _destination=$_to
        if [[ $_destination != */${_from##*/} ]]; then
            _destination=${_destination%/}/${_from##*/}
        fi
        if [[ -e "$_destination" ]]; then
            echo "Note that "$(echo_styled -i "$_destination")" exists and will be overwritten"
        fi
        local _from_short=${_from/$HOME/\~}
        echo "Copying "$(echo_styled -i "$_from_short")" -> "$(echo_styled -i "$_destination")""
    fi
    sudo cp "$_from" "$_to"
}

bootstrap_archlinux()
{
    print "Not yet implemented"
    return 0
    for arch_fn in "$DOTFILES_PATH"/archlinux/*; do
        case $_arch_fn in
            */pacman)
                for _pacman_fn in "$_arch_fn"/*; do
                    if [[ $_pacman_fn == */hooks ]]; then
                        for _hook_fn in "$_pacman_fn"/*; do
                            admin_copy "$_hook_fn" /etc/pacman.d/hooks/
                        done
                    else
                        echo ""$(echo_styled -e Warning:)" unknown pacman config file "$_pacman_fn""
                    fi
                done
                ;;
            */systemd)
                for _systemd_fn in "$_arch_fn"/*; do
                    if [[ -f "$_systemd_fn" ]]; then
                        # TODO: You might eventually also have user services, make sure the destination
                        # is correct
                        admin_copy "$_systemd_fn" /usr/lib/systemd/system/
                    else
                        echo ""$(echo_styled -e Warning:)" unexpected type of systemd config file "$_systemd_fn""
                    fi
                done
                if [[ -n "$VERBOSE" ]]; then
                    echo_styled -t "To enable a systemd service, run \"systemctl daemon-reload\" and \"systemctl enable {service}\"\n"
                fi
                ;;
            *)
                if [[ -x "$_arch_fn" && ! -d "$_arch_fn" ]]; then
                    admin_copy "$_arch_fn" /usr/local/bin/
                else
                    echo ""$(echo_styled -e Warning:)" unexpected type of archlinux config file "$_arch_fn""
                fi
                ;;
        esac
    done
}

main()
{
    if [[ ! $ZSH_VERSION == (5.<1->*|<6->.*) ]]; then
        print -P "%F{red}%BError:%f%b Minimal required zsh version is 5.1."
        exit 1
    fi

    process_args $@
    print_welcome
    (( SKIP_XDG )) || check_xdg_dirs
    (( SKIP_STANDARD_DIRS )) || check_standard_dirs

    if [[ "$(uname -s)" == Darwin ]]; then
        (( SKIP_MACOS_DEFAULTS )) || check_defaults
        prepare_package_manager || { \
            print -P "%F{red}%BError%f%b: Homebrew is necessary to perform bootstrapping on macOS." && \
            early_exit 1 }
        local libexec_path=$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin
        if [[ -x $libexec_path/ln ]]; then
            path=( $libexec_path $path )
        else
            install_package coreutils || :
            [[ -x $libexec_path/ln ]] || { \
                print -P "\n%F{red}%BError:%f%b Coreutils not installed, it is necessary to perform bootstrapping on macOS." && \
                early_exit 1 }
        fi
        (( SKIP_INSTALLATION )) || check_packages
    else
        (( SKIP_INSTALLATION )) || { prepare_package_manager && check_packages }
    fi

    for fn in $BOOTSTRAP_FILES; do
        print -Pn "\n%BBootstrapping %U$fn%u%b"
        case $fn in
            alacritty)
                [[ "$(uname -s)" == Linux ]] && local excluded=alacritty_macos.toml || local excluded=alacritty_linux.toml
                for alacritty_fn in $DOTFILES_PATH/alacritty/^${excluded}; do
                    if [[ $alacritty_fn == */alacritty_(macos|linux).toml ]]; then
                        safe_symlink $alacritty_fn $XDG_CONFIG_HOME/alacritty/alacritty.toml
                    else
                        bootstrap_generic $alacritty_fn $XDG_CONFIG_HOME
                    fi
                done

                if [[ ! -e $XDG_CONFIG_HOME/alacritty/theme.toml ]]; then
                    local bootstrap_theme
                    while [[ ! $bootstrap_theme =~ ^(everforest|gruvbox)$ ]]; do
                        local prompt="\nWhich terminal theme to bootstrap (gruvbox or everforest)?"
                        read "bootstrap_theme?${(g::)prompt}"
                    done
                    ln -sr $XDG_CONFIG_HOME/alacritty/themes/${bootstrap_theme}_dark.toml $XDG_CONFIG_HOME/alacritty/theme.toml
                fi
                ;;
            dircolors) 
                bootstrap_generic $DOTFILES_PATH/dircolors $HOME
                ;;
            zsh)
                bootstrap_zsh
                ;;
            bash)
                bootstrap_generic $DOTFILES_PATH/bash $HOME $DOTFILES_PATH/bash
                ;;
            tmux)
                bootstrap_tmux
                ;;
            vim)
                for vim_fn in $DOTFILES_PATH/vim/*; do
                    if [[ $vim_fn == */(|.)vimrc ]]; then
                        bootstrap_generic $vim_fn $HOME $DOTFILES_PATH/vim
                    else
                        bootstrap_generic $vim_fn $HOME
                    fi
                done
                ;;
            xdg-open)
                bootstrap_generic $DOTFILES_PATH/xdg-open $XDG_CONFIG_HOME $DOTFILES_PATH/xdg-open
                ;;
            task)
                for task_fn in $DOTFILES_PATH/task/*; do
                    if [[ ! -d $task_fn && -x $task_fn ]]; then
                        safe_symlink $task_fn $HOME/.local/bin/${task_fn:t}
                    else
                        bootstrap_generic $task_fn $XDG_CONFIG_HOME
                    fi
                done
                ;;
            nnn)
                local -a nnn_plugins=( $XDG_CONFIG_HOME/nnn/plugins/* )
                if (( #nnn_plugins == 0 )); then
                    if (( $+commands[nnn] )); then
                        install_package -C "nnn plugins" sh -c "$(curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs)"
                    else
                        print -Pn "%F{yellow}%BWarning:%f%b nnn plugins %Unot found%u and nnn is %Unot installed%u, install nnn to be able to install plugins."
                    fi
                    (( VERBOSE )) || print
                fi
                for nnn_fn in $DOTFILES_PATH/nnn/*; do
                    if [[ ${nnn_fn:t} == nscript ]]; then
                        safe_symlink $nnn_fn $HOME/.local/bin/nscript
                    elif [[ ${nnn_fn:t} == nnn.desktop ]]; then
                        [[ "$(uname -s)" != Darwin ]] && \
                            safe_symlink $nnn_fn $XDG_DATA_HOME/applications/nnn.desktop
                    else
                        (( VERBOSE )) && print -n "\n    " || print
                        print -Pn "%F{yellow}%BWarning:%f%b Unknown nnn config file $nnn_fn."
                        (( VERBOSE )) || print
                    fi
                done
                ;;
            pypoetry)
                local pypoetry_target_loc=$XDG_CONFIG_HOME
                [[ "$(uname -s)" == Darwin ]] && pypoetry_target_loc="$HOME/Library/Application Support"
                bootstrap_generic $DOTFILES_PATH/pypoetry $pypoetry_target_loc
                ;;
            archlinux)
                bootstrap_archlinux
                ;;
            mako)
                bootstrap_generic $DOTFILES_PATH/mako $XDG_CONFIG_HOME
                local themename=${THEMENAME:-everforest}
                local themebg=${THEMEBG:-dark}
                local theme_file=${themename}_${themebg}
                if [[ -h $XDG_CONFIG_HOME/mako/$theme_file ]]; then
                    if [[ ! -h $XDG_CONFIG_HOME/mako/config ]]; then
                        ln -fs $theme_file $XDG_CONFIG_HOME/mako/config
                        (( VERBOSE )) && print -Pn "\n    Setting current config to %U$theme_file%u."
                    fi
                else
                    (( VERBOSE )) && print -n "\n    " || print
                    print -Pn "%F{yellow}%BWarning:%f%b There is no config file \'$theme_file\' for current theme -> no current mako config set."
                    (( VERBOSE )) || print
                fi
                makoctl reload
                ;;
            scripts)
                local -a excluded=( "bootstrap(|.zsh)" )
                if [[ "$(uname -s)" != Darwin ]]; then
                    excluded+=( switch-macos-wm update-alacritty-icon )
                fi

                local scripts_pattern=$DOTFILES_PATH/scripts/^(${(j:|:)excluded})

                for script_fn in $~scripts_pattern; do
                    bootstrap_generic $script_fn $HOME/.local/bin $DOTFILES_PATH/scripts
                done
                ;;
            *)
                bootstrap_generic $DOTFILES_PATH/$fn $XDG_CONFIG_HOME
                ;;
        esac
        (( VERBOSE )) && print || print -n " "
        print -P "=> %B%F{green}Success%b%f"
    done

    (( VERBOSE )) && print -P "\n%F{green}%BBootstrap complete%f%b"
    return 0
}

# Setup trap that exits the script with a message when we get an uncaught error.
trap early_exit ERR

SCRIPT_NAME=${0:A:t}
DOTFILES_PATH=${0:A:h:h}
IGNORED=( "README.md" ".*" )

main $@
