# GIT CONFIG
#
# Basic git config with my user information.
# Some references:
# - https://gist.github.com/tdd/470582
# - https://gist.github.com/rab/4067067
# - https://github.com/thoughtbot/dotfiles/blob/main/gitconfig
#
# by Tadeas Uhlir <tadeas.uhlir@gmail.com>

[user]
    name = Tadeas Uhlir
    email = tadeas.uhlir@gmail.com

[alias]
    # Basic commands shortcuts
    a = add
    ai = add -i
    ap = add -p
    co = commit
    ch = checkout
    s = status -sb
    st = status
    df = diff
    rst = restore
    rsti = restore --staged
    ss = stash
    ssl = stash list
    ssa = stash apply
    ssd = stash drop

    # Nice one commit per line log
    lg = log --graph --date=relative --pretty=niceoneline
    # Log and one line log of only local commits
    lg-local = lg @{push}..
    log-local = log @{push}..
    # Log and one line log of only remote (in origin) commits
    lg-origin = lg ..origin/main
    log-origin = log --name-status ..origin/main
    # Log with file changes
    log-full = log --name-status

    last-remote = log @{push} -1 --name-status
    last = log -1 --name-status

    # Useful when you have to update your last commit
    # with staged files without editing the commit message.
    oops = commit --amend --no-edit

    # Remove file(s) from Git but not from disk
    untrack = rm --cache --

[core]
    # Using only LF line endings, see core.autocrlf in
    # https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
    autocrlf = input

[init]
    # Use main instead of master on git init
    defaultBranch = main

[push]
    # When pushing submit also tags reachable with the pushed refs,
    # this can be overriden with --no-follow-tags if you want to
    # ignore local tags
    followTags = true
    # Check that your submodules do not contain unpushed commits
    recurseSubmodules = check

[fetch]
    # Automatically remove any remote tracking branches that no longer
    # exist, I think this should always be safe
    prune = true

[diff]
    # Use (i)ndex, (c)ommit, (w)orking, and (o)bject in diff
    mnemonicPrefix = true
    # Vimdiff tool to use when running git difftool
    tool = nvimdiff
    # Detect moved lines and display them with different colors
    colorMoved = zebra
    # When showing submodule diff, show also commit log, not just SHA
    submodule = log

[merge]
    tool = fugitive

[mergetool "fugitive"]
    # Use fugitive for merge
    cmd = "$EDITOR -c 'Gvdiffsplit!' $MERGED"

[pretty]
    niceoneline = "tformat:%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset"
    changelog = "format:%C(magenta)*%Creset %C(brightblue)%h%Creset %s"

[color "status"]
    # To correspond to prompt setup
    branch = cyan
    changed = yellow
    untracked = cyan
    remoteBranch = brightblue
    localBranch = brightgreen

[color "diff"]
    # Header colors with command
    meta = brightblue bold
    # Line number
    frag = blue
    # Deleted and moved
    oldMoved = cyan
    # Moved and yanked
    newMoved = brightcyan
