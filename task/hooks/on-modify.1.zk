#!/usr/bin/env python3

from datetime import datetime
import json
from os import getenv
from pathlib import Path
import subprocess
from sys import argv, stdin
from textwrap import wrap
from typing import cast
from re import match


try:
    input_stream = stdin.buffer
except AttributeError:
    input_stream = stdin


def get_command(args):
    for arg in args:
        command = match(r"command:(\w+)", arg)
        if command:
            return command.group(1)
    return ''


def extract_newest_annotation(json_obj):
    if 'annotations' not in json_obj:
        return None

    return json_obj['annotations'][-1]


def main(_, new, command):
    if command in ['done', 'annotate', 'start']:
        now = datetime.now().astimezone()
        uuid = new['uuid'].split('-')[0]
        desc = new['description']
        action = ""
        first_line = ""
        detail_lines = []

        if command == 'done':
            action = "Completed"
            first_line = " **" + desc + "**"

        elif command == 'annotate':
            action = "Annotated"
            annotation = extract_newest_annotation(new)
            if annotation:
                detail_lines = wrap(annotation['description'], width=79,
                                    initial_indent="    > ", subsequent_indent="    > ")
                now = datetime.fromisoformat(annotation['entry']).astimezone()

        elif command == 'start':
            action = "Started"
            first_line = " **" + desc + "**"

        prefix = f"{action:s} task {uuid:s}"
        if 'project' in new:
            prefix += f" in #{new['project']:s} "
        first_line = prefix + ":" + first_line

        daily_note = Path(getenv("ZK_NOTEBOOK_DIR", ".")) / f"daily/{now.strftime('%Y-%m-%d')}.md"
        if daily_note.is_file():
            first_line = f"{now.strftime('%I:%M %p')} - " + first_line
            first_line_wrapped = wrap(first_line, width=79, initial_indent="* ", subsequent_indent="  ")
            with open(daily_note, "a") as df:
                for line in first_line_wrapped:
                    df.write(line + "\n")
                for line in detail_lines:
                    df.write(line + "\n")
        else:
            proc = subprocess.Popen(
                ['zk', 'new', '--interactive', '--no-input', '--date', now.isoformat(), 'daily', '--print-path'],
                text=True, stdin=subprocess.PIPE, stdout=subprocess.DEVNULL
            )
            input_wrapped = wrap(first_line, width=79)
            input_wrapped.extend(detail_lines)
            proc.communicate(input="\n".join(input_wrapped))


if __name__ == "__main__":
    old = json.loads(cast(bytes, input_stream.readline()).decode('utf-8', errors='replace'))
    new = json.loads(cast(bytes, input_stream.readline()).decode('utf-8', errors='replace'))
    command = get_command(argv)
    main(old, new, command)
    print(json.dumps(new))
