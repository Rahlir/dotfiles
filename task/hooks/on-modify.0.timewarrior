#!/usr/bin/env python3

###############################################################################
#
# Copyright 2016 - 2021, 2023, Gothenburg Bit Factory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# https://www.opensource.org/licenses/mit-license.php
#
###############################################################################

from datetime import datetime, timedelta
import json
import subprocess
import sys
from typing import cast

# Hook should extract all the following for use as Timewarrior tags:
#   UUID
#   Project
#   Tags
#   Description
#   UDAs

try:
    input_stream = sys.stdin.buffer
except AttributeError:
    input_stream = sys.stdin


def extract_tags_from(json_obj):
    # Extract attributes for use as tags.
    tags = [json_obj['description']]

    tags.append(json_obj['uuid'].split('-')[0])

    if 'project' in json_obj:
        tags.append(json_obj['project'])

    if 'tags' in json_obj:
        tags.extend(json_obj['tags'])

    return tags


def extract_annotation_from(json_obj):
    if 'annotations' not in json_obj:
        return '\'\''

    return json_obj['annotations'][0]['description']


def is_undo(args):
    for arg in args:
        if 'command' in arg:
            if arg.split(':')[1] == 'undo':
                return True
            else:
                return False


def calculate_total_time(json_obj):
    result = timedelta()
    for interval in json_obj:
         result += datetime.fromisoformat(interval['end']) - datetime.fromisoformat(interval['start'])
    return result


def timedelta_to_isostring(td):
    hours = td.seconds // 3600
    minutes = (td.seconds % 3600) // 60
    result_str = "P"
    if td.days:
        result_str += f"{td.days:d}D"
    if hours or minutes:
        result_str += "T"
    if hours:
        result_str += f"{hours:d}H"
    if minutes:
        result_str += f"{minutes:d}M"
    return result_str


def main(old, new):
    start_or_stop = ''

    # Started task.
    if 'start' in new and 'start' not in old:
        start_or_stop = 'start'

    # Stopped task.
    elif ('start' not in new or 'end' in new) and 'start' in old:
        start_or_stop = 'stop'

    if start_or_stop:
        tags = extract_tags_from(new)

        if start_or_stop == 'stop' and is_undo(sys.argv):
            subprocess.call(['timew', 'undo', ':yes'])
        else:
            subprocess.call(['timew', start_or_stop] + tags + [':yes'])
            if 'end' in new:
                uuid = new['uuid'].split('-')[0]
                timew_out_r = subprocess.check_output(['timew', 'export', uuid]).decode('utf-8', errors='replace')
                timew_out = json.loads(timew_out_r)
                if timew_out:
                    total_t = calculate_total_time(timew_out)
                    if total_t.days or total_t.seconds >= 60:
                        new['took'] = timedelta_to_isostring(total_t)

    # Modifications to task other than start/stop
    # TODO: There is a bug, it shouldn't just modify @1 segment, it should pick the relevant segment
    # using tags
    elif 'start' in new and 'start' in old:
        old_tags = extract_tags_from(old)
        new_tags = extract_tags_from(new)

        if old_tags != new_tags:
            subprocess.call(['timew', 'untag', '@1'] + old_tags + [':yes'])
            subprocess.call(['timew', 'tag', '@1'] + new_tags + [':yes'])

        old_annotation = extract_annotation_from(old)
        new_annotation = extract_annotation_from(new)

        if old_annotation != new_annotation:
            subprocess.call(['timew', 'annotate', '@1', new_annotation])


if __name__ == "__main__":
    old = json.loads(cast(bytes, input_stream.readline()).decode("utf-8", errors="replace"))
    new = json.loads(cast(bytes, input_stream.readline()).decode("utf-8", errors="replace"))
    main(old, new)
    if not new and is_undo(sys.argv):
        print(json.dumps(old))
    else:
        print(json.dumps(new))
